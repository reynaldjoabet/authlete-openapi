package endpoints

import common.models.*
import common.models.JsoniterSyntaticSugar.toJson
import sttp.tapir._
import sttp.tapir.generic.auto._
import sttp.tapir.json.jsoniter.*

final case class ClientManagementEndpoints() extends BaseEndpoint {

  /**
    * Delete all existing access tokens issued to a client application by an end-user.
    * /api/client/authorization/delete/{clientId}/{subject} API
    */
  val clientAuthorizationDelete =
    endpoint
      .delete
      .in(
        "api" / "client" / "authorization" / "delete" / path[String](
          "clientId"
        ) / path[String]("subject")
      )
      .out(jsonBody[ClientAuthorizationDeleteResponse])
      .errorOut(emptyOutput)

  /**
    * Get a list of client applications that an end-user has authorized. The subject parameter is
    * required and can be provided either in the path or as a query parameter.
    * /api/client/authorization/get/list/{subject} API
    */
  val clientAuthorizationGetList =
    endpoint
      .get
      .in(
        "api" / "client" / "authorization" / "get" / "list" / path[String](
          "subject"
        )
      )
      .in(query[String]("subject2"))
      .in(query[Option[String]]("developer"))
      .in(query[Option[Int]]("start"))
      .in(query[Option[Int]]("end"))
      .out(jsonBody[ClientAuthorizationGetListResponse])
      .errorOut(emptyOutput)

  /**
    * Update attributes of all existing access tokens given to a client application.
    * /api/client/authorization/update/{clientId} API
    */
  val clientAuthorizationUpdate =
    endpoint
      .post
      .in(
        "api" / "client" / "authorization" / "update" / path[String]("clientId")
      )
      .in(jsonBody[Option[ClientAuthorizationUpdateRequest]])
      .out(jsonBody[ClientAuthorizationUpdateResponse])
      .errorOut(emptyOutput)

  /**
    * Create a new client. /api/client/create API
    */
  val clientCreate =
    endpoint
      .post
      .in("api" / "client" / "create")
      .in(jsonBody[Option[Client]])
      .out(jsonBody[Client])
      .errorOut(emptyOutput)

  /**
    * Delete a client. /api/client/delete/{clientId} API
    */
  val clientDelete =
    endpoint
      .delete
      .in("api" / "client" / "delete" / path[String]("clientId"))
      .out(emptyOutput)
      .errorOut(emptyOutput)

  /**
    * Lock and unlock a client /api/client/lock_flag/update/{clientIdentifier} API
    */
  val clientFlagUpdate =
    endpoint
      .post
      .in(
        "api" / "client" / "lock_flag" / "update" / path[String](
          "clientIdentifier"
        )
      )
      .in(jsonBody[Option[ClientFlagUpdateRequest]])
      .out(jsonBody[ClientFlagUpdateResponse])
      .errorOut(emptyOutput)

  /**
    * Get a client. /api/client/get/{clientId} API
    */
  val clientGet =
    endpoint
      .get
      .in("api" / "client" / "get" / path[String]("clientId"))
      .out(jsonBody[Client])
      .errorOut(emptyOutput)

  /**
    * Get a list of clients. /api/client/get/list API
    */
  val clientGetList =
    endpoint
      .get
      .in("api" / "client" / "get" / "list")
      .in(query[Option[String]]("developer"))
      .in(query[Option[Int]]("start"))
      .in(query[Option[Int]]("end"))
      .out(jsonBody[ClientGetListResponse])
      .errorOut(emptyOutput)

  /**
    * Delete the set of scopes that an end-user has granted to a client application.
    * /api/client/granted_scopes/delete/{clientId}/{subject} API
    */
  val clientGrantedScopesDelete =
    endpoint
      .delete
      .in(
        "api" / "client" / "granted_scopes" / "delete" / path[String](
          "clientId"
        ) / path[String]("subject")
      )
      .out(jsonBody[ClientGrantedScopesDeleteResponse])
      .errorOut(emptyOutput)

  /**
    * Get the set of scopes that a user has granted to a client application.
    * /api/client/granted_scopes/get/{clientId}/{subject} API
    */
  val clientGrantedScopesGet =
    endpoint
      .get
      .in(
        "api" / "client" / "granted_scopes" / "get" / path[String](
          "clientId"
        ) / path[String]("subject")
      )
      .in(query[String]("subject2"))
      .out(jsonBody[ClientAuthorizationDeleteResponse])
      .errorOut(emptyOutput)

  /**
    * Refresh the client secret of a client. A new value of the client secret will be generated by
    * the Authlete server. /api/client/secret/refresh API
    */
  val clientSecretRefresh =
    endpoint
      .get
      .in(
        "api" / "client" / "secret" / "refresh" / path[String](
          "clientIdentifier"
        )
      )
      .out(jsonBody[ClientSecretRefreshResponse])
      .errorOut(emptyOutput)

  /**
    * Update the client secret of a client. If you want to have the Authlete server generate a new
    * value of the client secret, use `/api/client/secret/refresh` API. /api/client/secret/update
    * API
    */
  val clientSecretUpdate =
    endpoint
      .post
      .in("api" / "client" / "secret" / "update")
      .in(path[String]("clientIdentifier"))
      .in(jsonBody[ClientSecretUpdateRequest])
      .out(jsonBody[ClientSecretUpdateResponse])
      .errorOut(emptyOutput)

  /**
    * Update a client. /api/client/update/{clientId} API
    */
  val clientUpdate =
    endpoint
      .post
      .in("api" / "client" / "update" / path[String]("clientId"))
      .in(jsonBody[Option[Client]])
      .out(jsonBody[Client])
      .errorOut(emptyOutput)

}
