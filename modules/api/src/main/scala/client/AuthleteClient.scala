package client

import fs2.*

import endpoints.*
import sttp.client4.{asString, basicRequest, Response}
import sttp.client4.asBoth
import sttp.client4.asBothOption
import sttp.client4.asByteArray
import sttp.client4.asByteArrayAlways
import sttp.client4.asByteArrayOrFail
import sttp.client4.asEither
import sttp.client4.asPath
import sttp.client4.asPathAlways
import sttp.client4.asStreamAlwaysUnsafe
import sttp.client4.asStreamAlwaysWithMetadata
import sttp.client4.asStreamOrFail
import sttp.client4.asStreamUnsafe
import sttp.client4.asStreamWithMetadata
import sttp.client4.asString
import sttp.client4.asStringAlways
import sttp.client4.asStringOrFail
import sttp.client4.basicRequest
import sttp.client4.circe
import sttp.client4.emptyRequest
import sttp.client4.fromMetadata
import sttp.client4.httpclient
import sttp.client4.httpurlconnection
import sttp.client4.ignore
import sttp.client4.impl
import sttp.client4.internal
import sttp.client4.json
import sttp.client4.jsoniter
import sttp.client4.listener
import sttp.client4.logging
import sttp.client4.monad
import sttp.client4.multipartStream
import sttp.client4.quick
import sttp.client4.quickRequest
import sttp.client4.testing
import sttp.client4.upicklejson
import sttp.client4.wrappers
import sttp.client4.ws
import sttp.client4.Backend
import sttp.client4.BackendOptions
import sttp.client4.BasicBody
import sttp.client4.BasicBodyPart
import sttp.client4.BasicMultipartBody
import sttp.client4.ByteArrayBody
import sttp.client4.ByteBufferBody
import sttp.client4.ConditionalResponseAs
import sttp.client4.DefaultFutureBackend
import sttp.client4.DefaultReadTimeout
import sttp.client4.DefaultSyncBackend
import sttp.client4.DeserializationException
import sttp.client4.DuplicateHeaderBehavior
import sttp.client4.FileBody
import sttp.client4.GenericBackend
import sttp.client4.GenericRequest
import sttp.client4.GenericRequestBody
import sttp.client4.GenericResponseAs
import sttp.client4.GenericWebSocketResponseAs
import sttp.client4.HttpError
import sttp.client4.IgnoreResponse
import sttp.client4.InputStreamBody
import sttp.client4.IsOption
import sttp.client4.MappedResponseAs
import sttp.client4.MultipartBody
import sttp.client4.MultipartStreamBody
import sttp.client4.NoBody
import sttp.client4.PartialRequest
import sttp.client4.PartialRequestBuilder
import sttp.client4.PartialRequestExtensions
import sttp.client4.Request
import sttp.client4.RequestBuilder
import sttp.client4.RequestOptions
import sttp.client4.Response
import sttp.client4.ResponseAs
import sttp.client4.ResponseAsBoth
import sttp.client4.ResponseAsByteArray
import sttp.client4.ResponseAsDelegate
import sttp.client4.ResponseAsFile
import sttp.client4.ResponseAsFromMetadata
import sttp.client4.ResponseAsInputStream
import sttp.client4.ResponseAsStream
import sttp.client4.ResponseAsStreamUnsafe
import sttp.client4.ResponseAsWebSocket
import sttp.client4.SpecifyAuthScheme
import sttp.client4.StreamBackend
import sttp.client4.StreamBody
import sttp.client4.StreamRequest
import sttp.client4.StreamResponseAs
import sttp.client4.StringBody
import sttp.client4.UriContext
import sttp.client4.WebSocketBackend
import sttp.client4.WebSocketRequest
import sttp.client4.WebSocketResponseAs
import sttp.client4.WebSocketStreamBackend
import sttp.client4.WebSocketStreamRequest
import sttp.client4.WebSocketStreamResponseAs
import sttp.client4.WebSocketSyncBackend

final case class AuthleteClient[F[_]](
    backend: GenericBackend[F, Any],
    authorizationEndpoints: AuthorizationEndpoints
) {

  // Stream(1,2,3).map(_+12).repartition()

  // val authAuthorization=authorizationEndpoints.authAuthorization.toRequest
}
